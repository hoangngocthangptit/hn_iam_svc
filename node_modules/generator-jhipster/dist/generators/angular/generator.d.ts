import BaseApplicationGenerator from '../base-application/index.js';
import type { TaskTypes as DefaultTaskTypes } from '../../lib/types/application/tasks.js';
import type { AngularApplication, AngularEntity } from './types.js';
export default class AngularGenerator extends BaseApplicationGenerator<DefaultTaskTypes<AngularEntity, AngularApplication>> {
    [BaseApplicationGenerator.LOADING]: any;
    [BaseApplicationGenerator.PREPARING]: any;
    [BaseApplicationGenerator.PREPARING_EACH_ENTITY]: any;
    [BaseApplicationGenerator.PREPARING_EACH_ENTITY_FIELD]: any;
    [BaseApplicationGenerator.DEFAULT]: any;
    [BaseApplicationGenerator.WRITING]: any;
    [BaseApplicationGenerator.WRITING_ENTITIES]: import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").TaskParamWithEntities<AngularEntity, AngularApplication>, "cleanupEntitiesFiles" | "writeEntitiesFiles">;
    [BaseApplicationGenerator.POST_WRITING]: any;
    [BaseApplicationGenerator.POST_WRITING_ENTITIES]: import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PostWritingEntitiesTaskParam<AngularEntity, AngularApplication>, "postWriteEntitiesFiles">;
    [BaseApplicationGenerator.END]: any;
    beforeQueue(): Promise<void>;
    get loading(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").TaskParamWithApplicationDefaults<AngularEntity, AngularApplication>, "loadPackageJson" | "applicationDefauts">;
    get preparing(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PreparingTaskParam<AngularEntity, AngularApplication>, "javaNodeBuildPaths" | "applicationDefauts" | "addNeedles">;
    get preparingEachEntity(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PreparingEachEntityTaskParam<AngularEntity, AngularApplication>, "prepareEntity">;
    get preparingEachEntityField(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PreparingEachEntityFieldTaskParam<AngularEntity, AngularApplication>, "prepareField">;
    get default(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").TaskParamWithEntities<AngularEntity, AngularApplication>, "loadEntities" | "queueTranslateTransform">;
    get writing(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").WritingTaskParam<AngularEntity, AngularApplication>, "cleanup" | "cleanupOldFilesTask" | "writeEslintClientRootConfigFile" | "writeFiles">;
    get writingEntities(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").TaskParamWithEntities<AngularEntity, AngularApplication>, "cleanupEntitiesFiles" | "writeEntitiesFiles">;
    get postWriting(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PostWritingTaskParam<AngularEntity, AngularApplication>, "clientBundler" | "addWebsocketDependencies">;
    get postWritingEntities(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PostWritingEntitiesTaskParam<AngularEntity, AngularApplication>, "postWriteEntitiesFiles">;
    get end(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").TaskParamWithApplication<AngularEntity, AngularApplication>, "end">;
}
