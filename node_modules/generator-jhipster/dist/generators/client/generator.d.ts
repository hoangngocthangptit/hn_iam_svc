import BaseApplicationGenerator from '../base-application/index.js';
export default class JHipsterClientGenerator extends BaseApplicationGenerator {
    [BaseApplicationGenerator.PROMPTING]: import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/base/tasks.js").TaskParamWithControl, "askForClientTheme" | "askForClientThemeVariant">;
    [BaseApplicationGenerator.CONFIGURING]: any;
    [BaseApplicationGenerator.COMPOSING]: any;
    [BaseApplicationGenerator.LOADING]: any;
    [BaseApplicationGenerator.PREPARING]: any;
    [BaseApplicationGenerator.PREPARING_EACH_ENTITY]: {
        prepareEntity({ entity }: {
            entity: any;
        }): void;
    };
    [BaseApplicationGenerator.WRITING]: any;
    [BaseApplicationGenerator.WRITING_ENTITIES]: any;
    [BaseApplicationGenerator.POST_WRITING]: any;
    beforeQueue(): Promise<void>;
    get prompting(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/base/tasks.js").TaskParamWithControl, "askForClientTheme" | "askForClientThemeVariant">;
    get configuring(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/base/tasks.js").TaskParamWithControl, "applyNoFramework" | "mergeTestConfig" | "upgradeAngular" | "configureDevServerPort">;
    get composing(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/base/tasks.js").TaskParamWithControl, "composing">;
    get loading(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").TaskParamWithApplicationDefaults<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "loadPackageJson" | "loadSharedConfig">;
    get preparing(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PreparingTaskParam<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "microservice" | "preparing" | "prepareForTemplates" | "addExternalResource">;
    get preparingEachEntity(): {
        prepareEntity({ entity }: {
            entity: any;
        }): void;
    };
    get writing(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").WritingTaskParam<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "cleanup" | "writeCommonFiles" | "webappFakeDataSeed">;
    get writingEntities(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").TaskParamWithEntities<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "writeEnumerationFiles">;
    get postWriting(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PostWritingTaskParam<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "microfrontend" | "packageJsonScripts">;
}
