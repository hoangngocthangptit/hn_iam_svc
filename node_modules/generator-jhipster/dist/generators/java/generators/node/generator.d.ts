import BaseApplicationGenerator from '../../../base-application/index.js';
export default class NodeGenerator extends BaseApplicationGenerator {
    [BaseApplicationGenerator.COMPOSING]: any;
    [BaseApplicationGenerator.PREPARING]: any;
    [BaseApplicationGenerator.POST_PREPARING]: any;
    [BaseApplicationGenerator.WRITING]: any;
    beforeQueue(): Promise<void>;
    get composing(): import("../../../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../../../lib/types/base/tasks.js").TaskParamWithControl, "compose">;
    get preparing(): import("../../../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../../../lib/types/application/tasks.js").PreparingTaskParam<import("../../../base-application/index.js").Entity<import("../../../base-application/index.js").Field, never>, import("../../../../lib/types/application/application.js").ApplicationType<import("../../../base-application/index.js").Entity<import("../../../base-application/index.js").Field, never>>>, "javaNodeBuildPaths">;
    get postPreparing(): import("../../../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../../../lib/types/base/tasks.js").TaskParamWithControl & {
        source: import("../../../../lib/types/application/application.js").BaseApplicationSource;
    } & {
        application: import("../../../../lib/types/application/application.js").ApplicationType<import("../../../base-application/index.js").Entity<import("../../../base-application/index.js").Field, never>>;
    }, "useNpmWrapper" | "sortBuildFiles">;
    get writing(): import("../../../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../../../lib/types/application/tasks.js").WritingTaskParam<import("../../../base-application/index.js").Entity<import("../../../base-application/index.js").Field, never>, import("../../../../lib/types/application/application.js").ApplicationType<import("../../../base-application/index.js").Entity<import("../../../base-application/index.js").Field, never>>>, "writing">;
    useNpmWrapperInstallTask(): void;
}
