import BaseApplicationGenerator from '../base-application/index.js';
import type { Entity } from '../../lib/types/application/entity.js';
export default class BootstrapApplicationBase extends BaseApplicationGenerator {
    [BaseApplicationGenerator.INITIALIZING]: any;
    [BaseApplicationGenerator.CONFIGURING]: any;
    [BaseApplicationGenerator.LOADING]: any;
    [BaseApplicationGenerator.PREPARING]: any;
    [BaseApplicationGenerator.CONFIGURING_EACH_ENTITY]: any;
    [BaseApplicationGenerator.LOADING_ENTITIES]: any;
    [BaseApplicationGenerator.PREPARING_EACH_ENTITY]: any;
    [BaseApplicationGenerator.PREPARING_EACH_ENTITY_FIELD]: any;
    [BaseApplicationGenerator.PREPARING_EACH_ENTITY_RELATIONSHIP]: any;
    [BaseApplicationGenerator.POST_PREPARING_EACH_ENTITY]: any;
    [BaseApplicationGenerator.DEFAULT]: any;
    constructor(args: any, options: any, features: any);
    beforeQueue(): Promise<void>;
    get initializing(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/base/tasks.js").TaskParamWithControl, "jdlStore" | "displayLogo">;
    get configuring(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/base/tasks.js").TaskParamWithControl, "configuring">;
    get loading(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").TaskParamWithApplicationDefaults<Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<Entity<import("../base-application/index.js").Field, never>>>, "loadPackageJson" | "loadNodeDependencies" | "loadApplication">;
    get preparing(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PreparingTaskParam<Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<Entity<import("../base-application/index.js").Field, never>>>, "syncUserWithIdp" | "userManagement" | "loadApplicationKeys" | "prepareApplication" | "userRelationship">;
    get configuringEachEntity(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").ConfiguringEachEntityTaskParam<Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<Entity<import("../base-application/index.js").Field, never>>>, "configureEntity" | "configureRelationships">;
    get loadingEntities(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").LoadingEntitiesTaskParam<Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<Entity<import("../base-application/index.js").Field, never>>>, "loadingEntities" | "loadUser" | "loadUserManagement" | "loadAuthority">;
    get preparingEachEntity(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PreparingEachEntityTaskParam<Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<Entity<import("../base-application/index.js").Field, never>>>, "preparingEachEntity">;
    get preparingEachEntityField(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PreparingEachEntityFieldTaskParam<Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<Entity<import("../base-application/index.js").Field, never>>>, "prepareFieldsForTemplates">;
    get preparingEachEntityRelationship(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PreparingEachEntityRelationshipTaskParam<Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<Entity<import("../base-application/index.js").Field, never>>>, "prepareRelationshipsForTemplates">;
    get postPreparingEachEntity(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PreparingEachEntityTaskParam<Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<Entity<import("../base-application/index.js").Field, never>>>, "hasRequiredRelationship" | "checkForCircularRelationships">;
    get default(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").TaskParamWithEntities<Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<Entity<import("../base-application/index.js").Field, never>>>, "hasNonBuiltInEntity" | "loadApplicationKeys" | "task">;
    /**
     * Return the user home
     */
    getUserHome(): string | undefined;
    printDestinationInfo(cwd?: string): void;
}
