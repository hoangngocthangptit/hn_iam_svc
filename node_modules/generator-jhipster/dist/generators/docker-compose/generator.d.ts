import BaseWorkspacesGenerator from '../base-workspaces/index.js';
/**
 * @class
 * @extends {import('../base/index.js')}
 */
export default class DockerComposeGenerator extends BaseWorkspacesGenerator {
    [BaseWorkspacesGenerator.INITIALIZING]: any;
    [BaseWorkspacesGenerator.LOADING]: any;
    [BaseWorkspacesGenerator.PROMPTING_WORKSPACES]: any;
    [BaseWorkspacesGenerator.CONFIGURING_WORKSPACES]: any;
    [BaseWorkspacesGenerator.LOADING_WORKSPACES]: any;
    [BaseWorkspacesGenerator.PREPARING_WORKSPACES]: any;
    [BaseWorkspacesGenerator.DEFAULT]: any;
    [BaseWorkspacesGenerator.WRITING]: {
        cleanup(): void;
        writeDockerCompose({ deployment }: {
            deployment: any;
        }): void;
        writeRegistryFiles({ deployment }: {
            deployment: any;
        }): void;
        writeKeycloakFiles({ deployment }: {
            deployment: any;
        }): void;
        writePrometheusFiles({ deployment }: {
            deployment: any;
        }): void;
    };
    [BaseWorkspacesGenerator.END]: any;
    existingDeployment: any;
    jwtSecretKey: string;
    beforeQueue(): Promise<void>;
    get initializing(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/base/tasks.js").TaskParamWithControl, "checkDocker" | "sayHello" | "checkDockerCompose">;
    get loading(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/base/tasks.js").TaskParamWithControl & {
        applications: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>[];
    }, "loadWorkspacesConfig">;
    get promptingWorkspaces(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, any, "askForMonitoring" | "askForClustersMode" | "askForServiceDiscovery">;
    get configuringWorkspaces(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, any, "configureBaseDeployment">;
    get loadingWorkspaces(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, any, "loadBaseDeployment" | "loadPlatformConfig">;
    get preparingWorkspaces(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, any, "prepareDeployment">;
    get default(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, any, "setAppsYaml">;
    get writing(): {
        cleanup(): void;
        writeDockerCompose({ deployment }: {
            deployment: any;
        }): void;
        writeRegistryFiles({ deployment }: {
            deployment: any;
        }): void;
        writeKeycloakFiles({ deployment }: {
            deployment: any;
        }): void;
        writePrometheusFiles({ deployment }: {
            deployment: any;
        }): void;
    };
    get end(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, any, "end">;
    checkApplicationsDockerImages({ workspaces, applications }: {
        workspaces: any;
        applications: any;
    }): void;
    get deploymentConfigWithDefaults(): any;
    loadDeploymentConfig({ deployment }: {
        deployment: any;
    }): void;
    prepareDeploymentDerivedProperties({ deployment, applications }: {
        deployment: any;
        applications: any;
    }): void;
    askForMonitoring(): Promise<void>;
    askForClustersMode({ applications }: {
        applications: any;
    }): Promise<void>;
    askForServiceDiscovery({ applications }: {
        applications: any;
    }): Promise<void>;
}
