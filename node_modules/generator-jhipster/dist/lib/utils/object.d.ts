/**
 * Copyright 2013-2025 the original author or authors from the JHipster project.
 *
 * This file is part of the JHipster project, see https://www.jhipster.tech/
 * for more information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import type { OmitIndexSignature, Simplify } from 'type-fest';
/**
 * Copy and remove null and undefined values
 * @param object
 * @returns
 */
export declare function removeFieldsWithNullishValues<const T extends Record<string, any>>(object: T): T;
/**
 * Picks every field from source.
 * A field with undefined value is returned for missing fields.
 */
export declare const pickFields: (source: Record<string | number, any>, fields: (string | number)[]) => {
    [k: string]: any;
};
/**
 * Mutation properties accepts:
 * - functions: receives the application and the return value is set at the application property.
 * - non functions: application property will receive the property in case current value is undefined.
 *
 * Applies each mutation object in order.
 *
 * @example
 * // application = { prop: 'foo-bar', prop2: 'foo2' }
 * mutateData(
 *   data,
 *   { prop: 'foo', prop2: ({ prop }) => prop + 2 },
 *   { prop: ({ prop }) => prop + '-bar', prop2: 'won\'t override' },
 * );
 */
export declare const mutateData: <const T extends Record<string | number, any>>(context: T, ...mutations: Simplify<OmitIndexSignature<{ [Key in keyof (Partial<T> & {
    __override__?: boolean;
})]?: Key extends "__override__" ? boolean : Key extends keyof T ? T[Key] | ((ctx: T) => T[Key]) : never; }>>[]) => void;
